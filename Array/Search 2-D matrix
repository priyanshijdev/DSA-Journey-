Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true


 int n = matrix.size(), m = matrix[0].size();

        for(int i=0; i<n;i++) {
            for(int j=0;j<m; j++){
                if(matrix[i][j] == target)
                {
                    return true;
                }
            }
        }
        return false;
------------------------------------------------------------------------------------
Better Optimised approach: TC -O(nlogn)

class Solution {
public:

    bool binarySearch(vector<int>& nums, int target) {
    int n = nums.size(); //size of the array
    int low = 0, high = n - 1;

    // Perform the steps:
    while (low <= high) {
        int mid = (low + high) / 2;
        if (nums[mid] == target) return true;
        else if (target > nums[mid]) low = mid + 1;
        else high = mid - 1;
    }
    return false;
}
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
       int n = matrix.size();
    int m = matrix[0].size();

    for (int i = 0; i < n; i++) {
        if (matrix[i][0] <= target && target <= matrix[i][m - 1]) {
            return binarySearch(matrix[i], target);
        }
    }
    return false;
    }
};

------------------------------------------------------------------------------------
Better approch: 3 

convert into 1D array / flatten array
